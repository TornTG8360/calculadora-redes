{"ast":null,"code":"var _jsxFileName = \"/workspaces/calculadora-redes/calculadora-ip/src/calculadora.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calculadora() {\n  _s();\n  let [inputIP, setInputIP] = React.useState(\"\");\n  let [inputMascara, setInputMascara] = React.useState(\"\");\n  let [resultado, setResultado] = React.useState(null);\n  function comprobarInputIP(event) {\n    // Solo permitir números y puntos\n    const valor = event.target.value.replace(/[^0-9.]/g, '');\n    setInputIP(valor);\n  }\n  function comprobarInputMascara(event) {\n    // Solo permitir números y puntos\n    const valor = event.target.value.replace(/[^0-9.]/g, '');\n    setInputMascara(valor);\n  }\n  function obtenerClaseIP(primerOcteto) {\n    if (primerOcteto >= 1 && primerOcteto <= 126) return \"A\";\n    if (primerOcteto >= 128 && primerOcteto <= 191) return \"B\";\n    if (primerOcteto >= 192 && primerOcteto <= 223) return \"C\";\n    if (primerOcteto >= 224 && primerOcteto <= 239) return \"D\";\n    if (primerOcteto >= 240 && primerOcteto <= 255) return \"E\";\n    return \"No válida\";\n  }\n  function convertirOctetosABinario(octetos) {\n    // Convertir cada octeto a su representación binaria\n    let binarios = octetos.map(octeto => {\n      // Convertir a número y obtener representación binaria\n      let bin = parseInt(octeto).toString(2);\n      // Rellenar con ceros a la izquierda hasta tener 8 bits\n      return bin.padStart(8, '0');\n    });\n\n    // Unir todos los octetos en una sola cadena binaria\n    return binarios.join('');\n  }\n  function convertirBinarioADecimal(binario) {\n    const octetos = [];\n    // Separar la cadena binaria en grupos de 8 bits\n    for (let i = 0; i < 32; i += 8) {\n      const octeto = parseInt(binario.substr(i, 8), 2);\n      octetos.push(octeto);\n    }\n    return octetos.join('.');\n  }\n  function esIPPrivada(ip) {\n    const octetos = ip.split('.');\n    if (octetos.length !== 4) return false;\n    const primerOcteto = parseInt(octetos[0]);\n    const segundoOcteto = parseInt(octetos[1]);\n\n    // Clase A: 10.0.0.0 - 10.255.255.255\n    if (primerOcteto === 10) {\n      return true;\n    }\n\n    // Clase B: 172.16.0.0 - 172.31.255.255\n    if (primerOcteto === 172 && segundoOcteto >= 16 && segundoOcteto <= 31) {\n      return true;\n    }\n\n    // Clase C: 192.168.0.0 - 192.168.255.255\n    if (primerOcteto === 192 && segundoOcteto === 168) {\n      return true;\n    }\n\n    // Link-local: 169.254.0.0 - 169.254.255.255\n    if (primerOcteto === 169 && segundoOcteto === 254) {\n      return true;\n    }\n\n    // Loopback: 127.0.0.0 - 127.255.255.255\n    if (primerOcteto === 127) {\n      return true;\n    }\n    return false;\n  }\n  function visualizarRedBinaria(ipBinario, mascaraBinaria) {\n    const ip = ipBinario.slice(0, 32);\n    const mascara = mascaraBinaria.slice(0, 32);\n    const octetos = ip.match(/.{8}/g);\n\n    // Encontrar la posición donde comienza la parte de host\n    const posicionHost = mascara.indexOf('0');\n    return {\n      ipCompleta: octetos.map((octeto, index) => {\n        // Calcular la posición inicial de este octeto en bits\n        const posInicial = index * 8;\n        const posFinal = posInicial + 8;\n\n        // Si este octeto contiene la transición de red a host\n        if (posicionHost >= posInicial && posicionHost < posFinal) {\n          const splitPos = posicionHost % 8;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red-portion\",\n              children: octeto.substring(0, splitPos)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"host-portion\",\n              children: octeto.substring(splitPos)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this);\n        }\n        // Si el octeto está completamente en la porción de red\n        else if (posInicial < posicionHost) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"red-portion\",\n            children: octeto\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 28\n          }, this);\n        }\n        // Si el octeto está completamente en la porción de host\n        else {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"host-portion\",\n            children: octeto\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 28\n          }, this);\n        }\n      })\n    };\n  }\n  function calcular() {\n    let partesIP = inputIP.split(\".\");\n    let partesMascara = inputMascara.split(\".\");\n\n    // Validar que cada octeto esté en el rango correcto\n    for (let i = 0; i < partesIP.length; i++) {\n      const octeto = parseInt(partesIP[i]);\n\n      // Verificar que sea un número válido y esté en el rango 0-255\n      if (isNaN(octeto) || octeto < 0 || octeto > 255) {\n        alert(`El octeto ${i + 1} de la IP no es válido. Debe ser un número entre 0 y 255.`);\n        return;\n      }\n\n      // Verificar que no haya números con ceros a la izquierda (excepto el 0)\n      if (partesIP[i].length > 1 && partesIP[i][0] === '0') {\n        alert(`El octeto ${i + 1} de la IP no puede tener ceros a la izquierda.`);\n        return;\n      }\n    }\n    for (let i = 0; i < partesMascara.length; i++) {\n      const octeto = parseInt(partesMascara[i]);\n\n      // Verificar que sea un número válido y esté en el rango 0-255\n      if (isNaN(octeto) || octeto < 0 || octeto > 255) {\n        alert(`El octeto ${i + 1} de la máscara no es válido. Debe ser un número entre 0 y 255.`);\n        return;\n      }\n\n      // Verificar que no haya números con ceros a la izquierda (excepto el 0)\n      if (partesMascara[i].length > 1 && partesMascara[i][0] === '0') {\n        alert(`El octeto ${i + 1} de la máscara no puede tener ceros a la izquierda.`);\n        return;\n      }\n    }\n    console.log(\"La dirección IP y la máscara son válidas\");\n    const ipBinario = convertirOctetosABinario(partesIP);\n    const mascaraBinario = convertirOctetosABinario(partesMascara);\n\n    // Realizar operaciones AND y OR a nivel de bits\n    let redBinaria = '';\n    let broadcastBinaria = '';\n    for (let i = 0; i < 32; i++) {\n      // Calcular dirección de red (AND)\n      redBinaria += ipBinario[i] === '1' && mascaraBinario[i] === '1' ? '1' : '0';\n\n      // Calcular broadcast (OR con NOT máscara)\n      broadcastBinaria += mascaraBinario[i] === '1' ? redBinaria[i] : '1';\n    }\n\n    // Convertir resultados a formato decimal\n    const ipRed = convertirBinarioADecimal(redBinaria);\n    const ipBroadcast = convertirBinarioADecimal(broadcastBinaria);\n\n    // Calcular primera y última IP útil\n    const primeraIPBinaria = redBinaria.slice(0, -1) + '1';\n    const ultimaIPBinaria = broadcastBinaria.slice(0, -1) + '0';\n    const primeraIP = convertirBinarioADecimal(primeraIPBinaria);\n    const ultimaIP = convertirBinarioADecimal(ultimaIPBinaria);\n\n    // Calcular hosts (utilizando la máscara)\n    const unosEnMascara = mascaraBinario.split('1').length - 1;\n    const hosts = Math.pow(2, 32 - unosEnMascara) - 2;\n    const representacionBinaria = visualizarRedBinaria(ipBinario, mascaraBinario);\n    setResultado({\n      ipRed,\n      ipBroadcast,\n      hosts,\n      rangoUtil: `${primeraIP} - ${ultimaIP}`,\n      clase: obtenerClaseIP(parseInt(partesIP[0])),\n      esPrivada: esIPPrivada(inputIP),\n      representacionBinaria: representacionBinaria\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculadora\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"titulo-principal\",\n      children: \"Calculadora de Direcciones IP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Direcci\\xF3n IP: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ej: 192.168.1.1\",\n          value: inputIP,\n          onChange: comprobarInputIP\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"M\\xE1scara de red: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Ej: 255.255.255.0\",\n          value: inputMascara,\n          onChange: comprobarInputMascara\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calcular,\n        children: \"Calcular\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), resultado && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultados\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resultados:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"IP de Red:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 24\n        }, this), \" \", resultado.ipRed]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"IP de Broadcast:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 24\n        }, this), \" \", resultado.ipBroadcast]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Cantidad de IPs \\xFAtiles:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 24\n        }, this), \" \", resultado.hosts]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Rango de IPs \\xFAtiles:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 24\n        }, this), \" \", resultado.rangoUtil]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Clase de IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 24\n        }, this), \" \", resultado.clase]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Tipo de IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 24\n        }, this), \" \", resultado.esPrivada ? 'Privada' : 'Pública']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"representacion-binaria\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Representaci\\xF3n Binaria:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"binario-container\",\n          children: resultado.representacionBinaria.ipCompleta.map((octeto, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [octeto, index < 3 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"separador\",\n              children: \".\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 51\n            }, this)]\n          }, `fragment-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leyenda\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 35\n            }, this), \" Porci\\xF3n de Red\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"host-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 35\n            }, this), \" Porci\\xF3n de Host\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 9\n  }, this);\n}\n_s(Calculadora, \"BeAB1D5DZzq1jvONVPoZoyV8be4=\");\n_c = Calculadora;\nexport default Calculadora;\nvar _c;\n$RefreshReg$(_c, \"Calculadora\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Calculadora","_s","inputIP","setInputIP","useState","inputMascara","setInputMascara","resultado","setResultado","comprobarInputIP","event","valor","target","value","replace","comprobarInputMascara","obtenerClaseIP","primerOcteto","convertirOctetosABinario","octetos","binarios","map","octeto","bin","parseInt","toString","padStart","join","convertirBinarioADecimal","binario","i","substr","push","esIPPrivada","ip","split","length","segundoOcteto","visualizarRedBinaria","ipBinario","mascaraBinaria","slice","mascara","match","posicionHost","indexOf","ipCompleta","index","posInicial","posFinal","splitPos","children","className","substring","fileName","_jsxFileName","lineNumber","columnNumber","calcular","partesIP","partesMascara","isNaN","alert","console","log","mascaraBinario","redBinaria","broadcastBinaria","ipRed","ipBroadcast","primeraIPBinaria","ultimaIPBinaria","primeraIP","ultimaIP","unosEnMascara","hosts","Math","pow","representacionBinaria","rangoUtil","clase","esPrivada","type","placeholder","onChange","onClick","Fragment","_c","$RefreshReg$"],"sources":["/workspaces/calculadora-redes/calculadora-ip/src/calculadora.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Calculadora() {\r\n    let [inputIP, setInputIP] = React.useState(\"\");\r\n    let [inputMascara, setInputMascara] = React.useState(\"\");\r\n    let [resultado, setResultado] = React.useState(null);\r\n\r\n    function comprobarInputIP(event) {\r\n        // Solo permitir números y puntos\r\n        const valor = event.target.value.replace(/[^0-9.]/g, '');\r\n        setInputIP(valor);\r\n    }\r\n\r\n    function comprobarInputMascara(event) {\r\n        // Solo permitir números y puntos\r\n        const valor = event.target.value.replace(/[^0-9.]/g, '');\r\n        setInputMascara(valor);\r\n    }\r\n\r\n    function obtenerClaseIP(primerOcteto) {\r\n        if (primerOcteto >= 1 && primerOcteto <= 126) return \"A\";\r\n        if (primerOcteto >= 128 && primerOcteto <= 191) return \"B\";\r\n        if (primerOcteto >= 192 && primerOcteto <= 223) return \"C\";\r\n        if (primerOcteto >= 224 && primerOcteto <= 239) return \"D\";\r\n        if (primerOcteto >= 240 && primerOcteto <= 255) return \"E\";\r\n        return \"No válida\";\r\n    }\r\n\r\n    function convertirOctetosABinario(octetos) {\r\n        // Convertir cada octeto a su representación binaria\r\n        let binarios = octetos.map(octeto => {\r\n            // Convertir a número y obtener representación binaria\r\n            let bin = parseInt(octeto).toString(2);\r\n            // Rellenar con ceros a la izquierda hasta tener 8 bits\r\n            return bin.padStart(8, '0');\r\n        });\r\n        \r\n        // Unir todos los octetos en una sola cadena binaria\r\n        return binarios.join('');\r\n    }\r\n\r\n    function convertirBinarioADecimal(binario) {\r\n        const octetos = [];\r\n        // Separar la cadena binaria en grupos de 8 bits\r\n        for(let i = 0; i < 32; i += 8) {\r\n            const octeto = parseInt(binario.substr(i, 8), 2);\r\n            octetos.push(octeto);\r\n        }\r\n        return octetos.join('.');\r\n    }\r\n\r\n    function esIPPrivada(ip) {\r\n        const octetos = ip.split('.');\r\n        if (octetos.length !== 4) return false;\r\n\r\n        const primerOcteto = parseInt(octetos[0]);\r\n        const segundoOcteto = parseInt(octetos[1]);\r\n        \r\n        // Clase A: 10.0.0.0 - 10.255.255.255\r\n        if (primerOcteto === 10) {\r\n            return true;\r\n        }\r\n\r\n        // Clase B: 172.16.0.0 - 172.31.255.255\r\n        if (primerOcteto === 172 && \r\n            segundoOcteto >= 16 && \r\n            segundoOcteto <= 31) {\r\n            return true;\r\n        }\r\n\r\n        // Clase C: 192.168.0.0 - 192.168.255.255\r\n        if (primerOcteto === 192 && \r\n            segundoOcteto === 168) {\r\n            return true;\r\n        }\r\n\r\n        // Link-local: 169.254.0.0 - 169.254.255.255\r\n        if (primerOcteto === 169 && \r\n            segundoOcteto === 254) {\r\n            return true;\r\n        }\r\n\r\n        // Loopback: 127.0.0.0 - 127.255.255.255\r\n        if (primerOcteto === 127) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function visualizarRedBinaria(ipBinario, mascaraBinaria) {\r\n        const ip = ipBinario.slice(0, 32);\r\n        const mascara = mascaraBinaria.slice(0, 32);\r\n        \r\n        const octetos = ip.match(/.{8}/g);\r\n        \r\n        // Encontrar la posición donde comienza la parte de host\r\n        const posicionHost = mascara.indexOf('0');\r\n        \r\n        return {\r\n            ipCompleta: octetos.map((octeto, index) => {\r\n                // Calcular la posición inicial de este octeto en bits\r\n                const posInicial = index * 8;\r\n                const posFinal = posInicial + 8;\r\n                \r\n                // Si este octeto contiene la transición de red a host\r\n                if (posicionHost >= posInicial && posicionHost < posFinal) {\r\n                    const splitPos = posicionHost % 8;\r\n                    return (\r\n                        <span key={index}>\r\n                            <span className=\"red-portion\">{octeto.substring(0, splitPos)}</span>\r\n                            <span className=\"host-portion\">{octeto.substring(splitPos)}</span>\r\n                        </span>\r\n                    );\r\n                }\r\n                // Si el octeto está completamente en la porción de red\r\n                else if (posInicial < posicionHost) {\r\n                    return <span key={index} className=\"red-portion\">{octeto}</span>;\r\n                }\r\n                // Si el octeto está completamente en la porción de host\r\n                else {\r\n                    return <span key={index} className=\"host-portion\">{octeto}</span>;\r\n                }\r\n            })\r\n        };\r\n    }\r\n\r\n    function calcular() {\r\n        let partesIP = inputIP.split(\".\");\r\n        let partesMascara = inputMascara.split(\".\");\r\n\r\n        // Validar que cada octeto esté en el rango correcto\r\n        for (let i = 0; i < partesIP.length; i++) {\r\n            const octeto = parseInt(partesIP[i]);\r\n            \r\n            // Verificar que sea un número válido y esté en el rango 0-255\r\n            if (isNaN(octeto) || octeto < 0 || octeto > 255) {\r\n                alert(`El octeto ${i + 1} de la IP no es válido. Debe ser un número entre 0 y 255.`);\r\n                return;\r\n            }\r\n\r\n            // Verificar que no haya números con ceros a la izquierda (excepto el 0)\r\n            if (partesIP[i].length > 1 && partesIP[i][0] === '0') {\r\n                alert(`El octeto ${i + 1} de la IP no puede tener ceros a la izquierda.`);\r\n                return;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < partesMascara.length; i++) {\r\n            const octeto = parseInt(partesMascara[i]);\r\n            \r\n            // Verificar que sea un número válido y esté en el rango 0-255\r\n            if (isNaN(octeto) || octeto < 0 || octeto > 255) {\r\n                alert(`El octeto ${i + 1} de la máscara no es válido. Debe ser un número entre 0 y 255.`);\r\n                return;\r\n            }\r\n\r\n            // Verificar que no haya números con ceros a la izquierda (excepto el 0)\r\n            if (partesMascara[i].length > 1 && partesMascara[i][0] === '0') {\r\n                alert(`El octeto ${i + 1} de la máscara no puede tener ceros a la izquierda.`);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        console.log(\"La dirección IP y la máscara son válidas\");\r\n\r\n        const ipBinario = convertirOctetosABinario(partesIP);\r\n        const mascaraBinario = convertirOctetosABinario(partesMascara);\r\n\r\n        // Realizar operaciones AND y OR a nivel de bits\r\n        let redBinaria = '';\r\n        let broadcastBinaria = '';\r\n        \r\n        for(let i = 0; i < 32; i++) {\r\n            // Calcular dirección de red (AND)\r\n            redBinaria += (ipBinario[i] === '1' && mascaraBinario[i] === '1') ? '1' : '0';\r\n            \r\n            // Calcular broadcast (OR con NOT máscara)\r\n            broadcastBinaria += (mascaraBinario[i] === '1') ? redBinaria[i] : '1';\r\n        }\r\n\r\n        // Convertir resultados a formato decimal\r\n        const ipRed = convertirBinarioADecimal(redBinaria);\r\n        const ipBroadcast = convertirBinarioADecimal(broadcastBinaria);\r\n\r\n        // Calcular primera y última IP útil\r\n        const primeraIPBinaria = redBinaria.slice(0, -1) + '1';\r\n        const ultimaIPBinaria = broadcastBinaria.slice(0, -1) + '0';\r\n\r\n        const primeraIP = convertirBinarioADecimal(primeraIPBinaria);\r\n        const ultimaIP = convertirBinarioADecimal(ultimaIPBinaria);\r\n\r\n        // Calcular hosts (utilizando la máscara)\r\n        const unosEnMascara = mascaraBinario.split('1').length - 1;\r\n        const hosts = Math.pow(2, 32 - unosEnMascara) - 2;\r\n\r\n        const representacionBinaria = visualizarRedBinaria(ipBinario, mascaraBinario);\r\n        \r\n        setResultado({\r\n            ipRed,\r\n            ipBroadcast,\r\n            hosts,\r\n            rangoUtil: `${primeraIP} - ${ultimaIP}`,\r\n            clase: obtenerClaseIP(parseInt(partesIP[0])),\r\n            esPrivada: esIPPrivada(inputIP),\r\n            representacionBinaria: representacionBinaria\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"calculadora\">\r\n            <h1 className=\"titulo-principal\">Calculadora de Direcciones IP</h1>\r\n            <div className=\"input-group\">\r\n                <div>\r\n                    <label>Dirección IP: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Ej: 192.168.1.1\"\r\n                        value={inputIP}\r\n                        onChange={comprobarInputIP}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <label>Máscara de red: </label>\r\n                    <input \r\n                        type=\"text\" \r\n                        placeholder=\"Ej: 255.255.255.0\"\r\n                        value={inputMascara}\r\n                        onChange={comprobarInputMascara}\r\n                    />\r\n                </div>\r\n                <button onClick={calcular}>Calcular</button>\r\n            </div>\r\n\r\n            {resultado && (\r\n                <div className=\"resultados\">\r\n                    <h3>Resultados:</h3>\r\n                    <p><strong>IP de Red:</strong> {resultado.ipRed}</p>\r\n                    <p><strong>IP de Broadcast:</strong> {resultado.ipBroadcast}</p>\r\n                    <p><strong>Cantidad de IPs útiles:</strong> {resultado.hosts}</p>\r\n                    <p><strong>Rango de IPs útiles:</strong> {resultado.rangoUtil}</p>\r\n                    <p><strong>Clase de IP:</strong> {resultado.clase}</p>\r\n                    <p><strong>Tipo de IP:</strong> {resultado.esPrivada ? 'Privada' : 'Pública'}</p>\r\n                    \r\n                    <div className=\"representacion-binaria\">\r\n                        <h4>Representación Binaria:</h4>\r\n                        <div className=\"binario-container\">\r\n                            {resultado.representacionBinaria.ipCompleta.map((octeto, index) => (\r\n                                <React.Fragment key={`fragment-${index}`}>\r\n                                    {octeto}\r\n                                    {index < 3 && <span className=\"separador\">.</span>}\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"leyenda\">\r\n                            <span><span className=\"red-dot\"></span> Porción de Red</span>\r\n                            <span><span className=\"host-dot\"></span> Porción de Host</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calculadora;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}